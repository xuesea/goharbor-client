// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	jobservice "github.com/xuesea/goharbor-client/v5/apiv2/internal/api/client/jobservice"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// MockJobserviceClientService is an autogenerated mock type for the ClientService type
type MockJobserviceClientService struct {
	mock.Mock
}

// ActionPendingJobs provides a mock function with given fields: params, authInfo
func (_m *MockJobserviceClientService) ActionPendingJobs(params *jobservice.ActionPendingJobsParams, authInfo runtime.ClientAuthInfoWriter) (*jobservice.ActionPendingJobsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *jobservice.ActionPendingJobsOK
	if rf, ok := ret.Get(0).(func(*jobservice.ActionPendingJobsParams, runtime.ClientAuthInfoWriter) *jobservice.ActionPendingJobsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jobservice.ActionPendingJobsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*jobservice.ActionPendingJobsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkerPools provides a mock function with given fields: params, authInfo
func (_m *MockJobserviceClientService) GetWorkerPools(params *jobservice.GetWorkerPoolsParams, authInfo runtime.ClientAuthInfoWriter) (*jobservice.GetWorkerPoolsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *jobservice.GetWorkerPoolsOK
	if rf, ok := ret.Get(0).(func(*jobservice.GetWorkerPoolsParams, runtime.ClientAuthInfoWriter) *jobservice.GetWorkerPoolsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jobservice.GetWorkerPoolsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*jobservice.GetWorkerPoolsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkers provides a mock function with given fields: params, authInfo
func (_m *MockJobserviceClientService) GetWorkers(params *jobservice.GetWorkersParams, authInfo runtime.ClientAuthInfoWriter) (*jobservice.GetWorkersOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *jobservice.GetWorkersOK
	if rf, ok := ret.Get(0).(func(*jobservice.GetWorkersParams, runtime.ClientAuthInfoWriter) *jobservice.GetWorkersOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jobservice.GetWorkersOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*jobservice.GetWorkersParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobQueues provides a mock function with given fields: params, authInfo
func (_m *MockJobserviceClientService) ListJobQueues(params *jobservice.ListJobQueuesParams, authInfo runtime.ClientAuthInfoWriter) (*jobservice.ListJobQueuesOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *jobservice.ListJobQueuesOK
	if rf, ok := ret.Get(0).(func(*jobservice.ListJobQueuesParams, runtime.ClientAuthInfoWriter) *jobservice.ListJobQueuesOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jobservice.ListJobQueuesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*jobservice.ListJobQueuesParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockJobserviceClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// StopRunningJob provides a mock function with given fields: params, authInfo
func (_m *MockJobserviceClientService) StopRunningJob(params *jobservice.StopRunningJobParams, authInfo runtime.ClientAuthInfoWriter) (*jobservice.StopRunningJobOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *jobservice.StopRunningJobOK
	if rf, ok := ret.Get(0).(func(*jobservice.StopRunningJobParams, runtime.ClientAuthInfoWriter) *jobservice.StopRunningJobOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jobservice.StopRunningJobOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*jobservice.StopRunningJobParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockJobserviceClientService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockJobserviceClientService creates a new instance of MockJobserviceClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockJobserviceClientService(t mockConstructorTestingTNewMockJobserviceClientService) *MockJobserviceClientService {
	mock := &MockJobserviceClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
