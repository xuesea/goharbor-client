// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	runtime "github.com/go-openapi/runtime"
	purge "github.com/xuesea/goharbor-client/v5/apiv2/internal/api/client/purge"
	mock "github.com/stretchr/testify/mock"
)

// MockPurgeClientService is an autogenerated mock type for the ClientService type
type MockPurgeClientService struct {
	mock.Mock
}

// CreatePurgeSchedule provides a mock function with given fields: params, authInfo
func (_m *MockPurgeClientService) CreatePurgeSchedule(params *purge.CreatePurgeScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*purge.CreatePurgeScheduleCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *purge.CreatePurgeScheduleCreated
	if rf, ok := ret.Get(0).(func(*purge.CreatePurgeScheduleParams, runtime.ClientAuthInfoWriter) *purge.CreatePurgeScheduleCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*purge.CreatePurgeScheduleCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*purge.CreatePurgeScheduleParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPurgeHistory provides a mock function with given fields: params, authInfo
func (_m *MockPurgeClientService) GetPurgeHistory(params *purge.GetPurgeHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*purge.GetPurgeHistoryOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *purge.GetPurgeHistoryOK
	if rf, ok := ret.Get(0).(func(*purge.GetPurgeHistoryParams, runtime.ClientAuthInfoWriter) *purge.GetPurgeHistoryOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*purge.GetPurgeHistoryOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*purge.GetPurgeHistoryParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPurgeJob provides a mock function with given fields: params, authInfo
func (_m *MockPurgeClientService) GetPurgeJob(params *purge.GetPurgeJobParams, authInfo runtime.ClientAuthInfoWriter) (*purge.GetPurgeJobOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *purge.GetPurgeJobOK
	if rf, ok := ret.Get(0).(func(*purge.GetPurgeJobParams, runtime.ClientAuthInfoWriter) *purge.GetPurgeJobOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*purge.GetPurgeJobOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*purge.GetPurgeJobParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPurgeJobLog provides a mock function with given fields: params, authInfo
func (_m *MockPurgeClientService) GetPurgeJobLog(params *purge.GetPurgeJobLogParams, authInfo runtime.ClientAuthInfoWriter) (*purge.GetPurgeJobLogOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *purge.GetPurgeJobLogOK
	if rf, ok := ret.Get(0).(func(*purge.GetPurgeJobLogParams, runtime.ClientAuthInfoWriter) *purge.GetPurgeJobLogOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*purge.GetPurgeJobLogOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*purge.GetPurgeJobLogParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPurgeSchedule provides a mock function with given fields: params, authInfo
func (_m *MockPurgeClientService) GetPurgeSchedule(params *purge.GetPurgeScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*purge.GetPurgeScheduleOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *purge.GetPurgeScheduleOK
	if rf, ok := ret.Get(0).(func(*purge.GetPurgeScheduleParams, runtime.ClientAuthInfoWriter) *purge.GetPurgeScheduleOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*purge.GetPurgeScheduleOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*purge.GetPurgeScheduleParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockPurgeClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// StopPurge provides a mock function with given fields: params, authInfo
func (_m *MockPurgeClientService) StopPurge(params *purge.StopPurgeParams, authInfo runtime.ClientAuthInfoWriter) (*purge.StopPurgeOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *purge.StopPurgeOK
	if rf, ok := ret.Get(0).(func(*purge.StopPurgeParams, runtime.ClientAuthInfoWriter) *purge.StopPurgeOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*purge.StopPurgeOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*purge.StopPurgeParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePurgeSchedule provides a mock function with given fields: params, authInfo
func (_m *MockPurgeClientService) UpdatePurgeSchedule(params *purge.UpdatePurgeScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*purge.UpdatePurgeScheduleOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *purge.UpdatePurgeScheduleOK
	if rf, ok := ret.Get(0).(func(*purge.UpdatePurgeScheduleParams, runtime.ClientAuthInfoWriter) *purge.UpdatePurgeScheduleOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*purge.UpdatePurgeScheduleOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*purge.UpdatePurgeScheduleParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockPurgeClientService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPurgeClientService creates a new instance of MockPurgeClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPurgeClientService(t mockConstructorTestingTNewMockPurgeClientService) *MockPurgeClientService {
	mock := &MockPurgeClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
