// Code generated by go-swagger; DO NOT EDIT.

package scan_data_export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xuesea/goharbor-client/v5/apiv2/model"
)

// GetScanDataExportExecutionListReader is a Reader for the GetScanDataExportExecutionList structure.
type GetScanDataExportExecutionListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScanDataExportExecutionListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScanDataExportExecutionListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetScanDataExportExecutionListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScanDataExportExecutionListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScanDataExportExecutionListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetScanDataExportExecutionListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScanDataExportExecutionListOK creates a GetScanDataExportExecutionListOK with default headers values
func NewGetScanDataExportExecutionListOK() *GetScanDataExportExecutionListOK {
	return &GetScanDataExportExecutionListOK{}
}

/*GetScanDataExportExecutionListOK handles this case with default header values.

Success
*/
type GetScanDataExportExecutionListOK struct {
	Payload *model.ScanDataExportExecutionList
}

func (o *GetScanDataExportExecutionListOK) Error() string {
	return fmt.Sprintf("[GET /export/cve/executions][%d] getScanDataExportExecutionListOK  %+v", 200, o.Payload)
}

func (o *GetScanDataExportExecutionListOK) GetPayload() *model.ScanDataExportExecutionList {
	return o.Payload
}

func (o *GetScanDataExportExecutionListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.ScanDataExportExecutionList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScanDataExportExecutionListUnauthorized creates a GetScanDataExportExecutionListUnauthorized with default headers values
func NewGetScanDataExportExecutionListUnauthorized() *GetScanDataExportExecutionListUnauthorized {
	return &GetScanDataExportExecutionListUnauthorized{}
}

/*GetScanDataExportExecutionListUnauthorized handles this case with default header values.

Unauthorized
*/
type GetScanDataExportExecutionListUnauthorized struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *GetScanDataExportExecutionListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /export/cve/executions][%d] getScanDataExportExecutionListUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScanDataExportExecutionListUnauthorized) GetPayload() *model.Errors {
	return o.Payload
}

func (o *GetScanDataExportExecutionListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScanDataExportExecutionListForbidden creates a GetScanDataExportExecutionListForbidden with default headers values
func NewGetScanDataExportExecutionListForbidden() *GetScanDataExportExecutionListForbidden {
	return &GetScanDataExportExecutionListForbidden{}
}

/*GetScanDataExportExecutionListForbidden handles this case with default header values.

Forbidden
*/
type GetScanDataExportExecutionListForbidden struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *GetScanDataExportExecutionListForbidden) Error() string {
	return fmt.Sprintf("[GET /export/cve/executions][%d] getScanDataExportExecutionListForbidden  %+v", 403, o.Payload)
}

func (o *GetScanDataExportExecutionListForbidden) GetPayload() *model.Errors {
	return o.Payload
}

func (o *GetScanDataExportExecutionListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScanDataExportExecutionListNotFound creates a GetScanDataExportExecutionListNotFound with default headers values
func NewGetScanDataExportExecutionListNotFound() *GetScanDataExportExecutionListNotFound {
	return &GetScanDataExportExecutionListNotFound{}
}

/*GetScanDataExportExecutionListNotFound handles this case with default header values.

Not found
*/
type GetScanDataExportExecutionListNotFound struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *GetScanDataExportExecutionListNotFound) Error() string {
	return fmt.Sprintf("[GET /export/cve/executions][%d] getScanDataExportExecutionListNotFound  %+v", 404, o.Payload)
}

func (o *GetScanDataExportExecutionListNotFound) GetPayload() *model.Errors {
	return o.Payload
}

func (o *GetScanDataExportExecutionListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScanDataExportExecutionListInternalServerError creates a GetScanDataExportExecutionListInternalServerError with default headers values
func NewGetScanDataExportExecutionListInternalServerError() *GetScanDataExportExecutionListInternalServerError {
	return &GetScanDataExportExecutionListInternalServerError{}
}

/*GetScanDataExportExecutionListInternalServerError handles this case with default header values.

Internal server error
*/
type GetScanDataExportExecutionListInternalServerError struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *GetScanDataExportExecutionListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /export/cve/executions][%d] getScanDataExportExecutionListInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScanDataExportExecutionListInternalServerError) GetPayload() *model.Errors {
	return o.Payload
}

func (o *GetScanDataExportExecutionListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
