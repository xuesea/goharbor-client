// Code generated by go-swagger; DO NOT EDIT.

package scan_data_export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xuesea/goharbor-client/v5/apiv2/model"
)

// ExportScanDataReader is a Reader for the ExportScanData structure.
type ExportScanDataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportScanDataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportScanDataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExportScanDataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExportScanDataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExportScanDataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExportScanDataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewExportScanDataMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewExportScanDataConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExportScanDataInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExportScanDataOK creates a ExportScanDataOK with default headers values
func NewExportScanDataOK() *ExportScanDataOK {
	return &ExportScanDataOK{}
}

/*ExportScanDataOK handles this case with default header values.

Success.
*/
type ExportScanDataOK struct {
	Payload *model.ScanDataExportJob
}

func (o *ExportScanDataOK) Error() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataOK  %+v", 200, o.Payload)
}

func (o *ExportScanDataOK) GetPayload() *model.ScanDataExportJob {
	return o.Payload
}

func (o *ExportScanDataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.ScanDataExportJob)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportScanDataBadRequest creates a ExportScanDataBadRequest with default headers values
func NewExportScanDataBadRequest() *ExportScanDataBadRequest {
	return &ExportScanDataBadRequest{}
}

/*ExportScanDataBadRequest handles this case with default header values.

Bad request
*/
type ExportScanDataBadRequest struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ExportScanDataBadRequest) Error() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataBadRequest  %+v", 400, o.Payload)
}

func (o *ExportScanDataBadRequest) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ExportScanDataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportScanDataUnauthorized creates a ExportScanDataUnauthorized with default headers values
func NewExportScanDataUnauthorized() *ExportScanDataUnauthorized {
	return &ExportScanDataUnauthorized{}
}

/*ExportScanDataUnauthorized handles this case with default header values.

Unauthorized
*/
type ExportScanDataUnauthorized struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ExportScanDataUnauthorized) Error() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataUnauthorized  %+v", 401, o.Payload)
}

func (o *ExportScanDataUnauthorized) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ExportScanDataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportScanDataForbidden creates a ExportScanDataForbidden with default headers values
func NewExportScanDataForbidden() *ExportScanDataForbidden {
	return &ExportScanDataForbidden{}
}

/*ExportScanDataForbidden handles this case with default header values.

Forbidden
*/
type ExportScanDataForbidden struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ExportScanDataForbidden) Error() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataForbidden  %+v", 403, o.Payload)
}

func (o *ExportScanDataForbidden) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ExportScanDataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportScanDataNotFound creates a ExportScanDataNotFound with default headers values
func NewExportScanDataNotFound() *ExportScanDataNotFound {
	return &ExportScanDataNotFound{}
}

/*ExportScanDataNotFound handles this case with default header values.

Not found
*/
type ExportScanDataNotFound struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ExportScanDataNotFound) Error() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataNotFound  %+v", 404, o.Payload)
}

func (o *ExportScanDataNotFound) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ExportScanDataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportScanDataMethodNotAllowed creates a ExportScanDataMethodNotAllowed with default headers values
func NewExportScanDataMethodNotAllowed() *ExportScanDataMethodNotAllowed {
	return &ExportScanDataMethodNotAllowed{}
}

/*ExportScanDataMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type ExportScanDataMethodNotAllowed struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ExportScanDataMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ExportScanDataMethodNotAllowed) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ExportScanDataMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportScanDataConflict creates a ExportScanDataConflict with default headers values
func NewExportScanDataConflict() *ExportScanDataConflict {
	return &ExportScanDataConflict{}
}

/*ExportScanDataConflict handles this case with default header values.

Conflict
*/
type ExportScanDataConflict struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ExportScanDataConflict) Error() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataConflict  %+v", 409, o.Payload)
}

func (o *ExportScanDataConflict) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ExportScanDataConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportScanDataInternalServerError creates a ExportScanDataInternalServerError with default headers values
func NewExportScanDataInternalServerError() *ExportScanDataInternalServerError {
	return &ExportScanDataInternalServerError{}
}

/*ExportScanDataInternalServerError handles this case with default header values.

Internal server error
*/
type ExportScanDataInternalServerError struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ExportScanDataInternalServerError) Error() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataInternalServerError  %+v", 500, o.Payload)
}

func (o *ExportScanDataInternalServerError) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ExportScanDataInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
