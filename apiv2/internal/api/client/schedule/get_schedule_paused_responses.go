// Code generated by go-swagger; DO NOT EDIT.

package schedule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xuesea/goharbor-client/v5/apiv2/model"
)

// GetSchedulePausedReader is a Reader for the GetSchedulePaused structure.
type GetSchedulePausedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSchedulePausedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSchedulePausedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSchedulePausedUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSchedulePausedForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSchedulePausedNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSchedulePausedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSchedulePausedOK creates a GetSchedulePausedOK with default headers values
func NewGetSchedulePausedOK() *GetSchedulePausedOK {
	return &GetSchedulePausedOK{}
}

/*GetSchedulePausedOK handles this case with default header values.

Get scheduler status successfully.
*/
type GetSchedulePausedOK struct {
	Payload *model.SchedulerStatus
}

func (o *GetSchedulePausedOK) Error() string {
	return fmt.Sprintf("[GET /schedules/{job_type}/paused][%d] getSchedulePausedOK  %+v", 200, o.Payload)
}

func (o *GetSchedulePausedOK) GetPayload() *model.SchedulerStatus {
	return o.Payload
}

func (o *GetSchedulePausedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.SchedulerStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchedulePausedUnauthorized creates a GetSchedulePausedUnauthorized with default headers values
func NewGetSchedulePausedUnauthorized() *GetSchedulePausedUnauthorized {
	return &GetSchedulePausedUnauthorized{}
}

/*GetSchedulePausedUnauthorized handles this case with default header values.

Unauthorized
*/
type GetSchedulePausedUnauthorized struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *GetSchedulePausedUnauthorized) Error() string {
	return fmt.Sprintf("[GET /schedules/{job_type}/paused][%d] getSchedulePausedUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSchedulePausedUnauthorized) GetPayload() *model.Errors {
	return o.Payload
}

func (o *GetSchedulePausedUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchedulePausedForbidden creates a GetSchedulePausedForbidden with default headers values
func NewGetSchedulePausedForbidden() *GetSchedulePausedForbidden {
	return &GetSchedulePausedForbidden{}
}

/*GetSchedulePausedForbidden handles this case with default header values.

Forbidden
*/
type GetSchedulePausedForbidden struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *GetSchedulePausedForbidden) Error() string {
	return fmt.Sprintf("[GET /schedules/{job_type}/paused][%d] getSchedulePausedForbidden  %+v", 403, o.Payload)
}

func (o *GetSchedulePausedForbidden) GetPayload() *model.Errors {
	return o.Payload
}

func (o *GetSchedulePausedForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchedulePausedNotFound creates a GetSchedulePausedNotFound with default headers values
func NewGetSchedulePausedNotFound() *GetSchedulePausedNotFound {
	return &GetSchedulePausedNotFound{}
}

/*GetSchedulePausedNotFound handles this case with default header values.

Not found
*/
type GetSchedulePausedNotFound struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *GetSchedulePausedNotFound) Error() string {
	return fmt.Sprintf("[GET /schedules/{job_type}/paused][%d] getSchedulePausedNotFound  %+v", 404, o.Payload)
}

func (o *GetSchedulePausedNotFound) GetPayload() *model.Errors {
	return o.Payload
}

func (o *GetSchedulePausedNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchedulePausedInternalServerError creates a GetSchedulePausedInternalServerError with default headers values
func NewGetSchedulePausedInternalServerError() *GetSchedulePausedInternalServerError {
	return &GetSchedulePausedInternalServerError{}
}

/*GetSchedulePausedInternalServerError handles this case with default header values.

Internal server error
*/
type GetSchedulePausedInternalServerError struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *GetSchedulePausedInternalServerError) Error() string {
	return fmt.Sprintf("[GET /schedules/{job_type}/paused][%d] getSchedulePausedInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSchedulePausedInternalServerError) GetPayload() *model.Errors {
	return o.Payload
}

func (o *GetSchedulePausedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
