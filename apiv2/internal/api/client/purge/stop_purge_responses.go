// Code generated by go-swagger; DO NOT EDIT.

package purge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xuesea/goharbor-client/v5/apiv2/model"
)

// StopPurgeReader is a Reader for the StopPurge structure.
type StopPurgeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopPurgeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStopPurgeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewStopPurgeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStopPurgeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopPurgeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStopPurgeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStopPurgeOK creates a StopPurgeOK with default headers values
func NewStopPurgeOK() *StopPurgeOK {
	return &StopPurgeOK{}
}

/*StopPurgeOK handles this case with default header values.

Success
*/
type StopPurgeOK struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string
}

func (o *StopPurgeOK) Error() string {
	return fmt.Sprintf("[PUT /system/purgeaudit/{purge_id}][%d] stopPurgeOK ", 200)
}

func (o *StopPurgeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	return nil
}

// NewStopPurgeUnauthorized creates a StopPurgeUnauthorized with default headers values
func NewStopPurgeUnauthorized() *StopPurgeUnauthorized {
	return &StopPurgeUnauthorized{}
}

/*StopPurgeUnauthorized handles this case with default header values.

Unauthorized
*/
type StopPurgeUnauthorized struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *StopPurgeUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /system/purgeaudit/{purge_id}][%d] stopPurgeUnauthorized  %+v", 401, o.Payload)
}

func (o *StopPurgeUnauthorized) GetPayload() *model.Errors {
	return o.Payload
}

func (o *StopPurgeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopPurgeForbidden creates a StopPurgeForbidden with default headers values
func NewStopPurgeForbidden() *StopPurgeForbidden {
	return &StopPurgeForbidden{}
}

/*StopPurgeForbidden handles this case with default header values.

Forbidden
*/
type StopPurgeForbidden struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *StopPurgeForbidden) Error() string {
	return fmt.Sprintf("[PUT /system/purgeaudit/{purge_id}][%d] stopPurgeForbidden  %+v", 403, o.Payload)
}

func (o *StopPurgeForbidden) GetPayload() *model.Errors {
	return o.Payload
}

func (o *StopPurgeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopPurgeNotFound creates a StopPurgeNotFound with default headers values
func NewStopPurgeNotFound() *StopPurgeNotFound {
	return &StopPurgeNotFound{}
}

/*StopPurgeNotFound handles this case with default header values.

Not found
*/
type StopPurgeNotFound struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *StopPurgeNotFound) Error() string {
	return fmt.Sprintf("[PUT /system/purgeaudit/{purge_id}][%d] stopPurgeNotFound  %+v", 404, o.Payload)
}

func (o *StopPurgeNotFound) GetPayload() *model.Errors {
	return o.Payload
}

func (o *StopPurgeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopPurgeInternalServerError creates a StopPurgeInternalServerError with default headers values
func NewStopPurgeInternalServerError() *StopPurgeInternalServerError {
	return &StopPurgeInternalServerError{}
}

/*StopPurgeInternalServerError handles this case with default header values.

Internal server error
*/
type StopPurgeInternalServerError struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *StopPurgeInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /system/purgeaudit/{purge_id}][%d] stopPurgeInternalServerError  %+v", 500, o.Payload)
}

func (o *StopPurgeInternalServerError) GetPayload() *model.Errors {
	return o.Payload
}

func (o *StopPurgeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
